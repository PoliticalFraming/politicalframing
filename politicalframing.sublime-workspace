{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"contents": "'use strict';\n\n// http://stackoverflow.com/questions/11172269/select-all-and-remove-all-with-chosen-js/11172403#11172403\n\nangular.module('framingApp').controller('MainCtrl', function ($scope, $filter, $templateCache, Speech, State, Analyze, AnalyzeData, Frame) {\n    var REMOTE_SERVER = \"\";\n    var LOCAL_SERVER = \"\"\n\n    var CURRENT_SERVER = LOCAL_SERVER;\n\n    $scope.status_bar = \"\";\n    $scope.page = 1;\n    $scope.total = 0;\n\n    // var layoutPlugin = new ngGridLayoutPlugin();\n\n    $scope.currentFilter = {}\n    $scope.setCurrentSpeech = function (id) { $scope.currentSpeech = $scope.speeches[id]; };\n\n    $scope.loadSpeeches = function (parameters) {\n        if ($scope.selectedTopic == null) return;\n        var url = CURRENT_SERVER + '/api/speechtopics/?page=' + $scope.page;\n        for (var param in parameters) {\n            url += \"&\" + param + \"=\" + parameters[param];\n        }\n        console.log(url);\n        Speech.getSpeeches(url).then(function (response) {\n            $scope.next = response.data.meta.next;\n            $scope.speeches = response.data.objects;\n            $scope.total = $filter('number')(response.data.meta.count);\n            $scope.status_bar = \"Showing \" + ($scope.speeches.length === 0 ? \"0\" : \"1\") + \" to \" + $filter('number')($scope.speeches.length) + \" of \" + $scope.total + \" entries\";\n        });\n    }\n\n    $scope.selectedTopic = null;\n    $scope.topicsSelectOptions = {\n        ajax: {\n            url: CURRENT_SERVER + \"/api/topics/\",\n            data: function () {\n                return {}; // query params go here\n            },\n            cache: true,\n            results: function (data) { \n                var response = data.objects;\n                var newResponse = [];\n                for(var i = 0; i < response.length; i++) {\n                    newResponse.push({'id': response[i].topic_id, 'text': response[i].phrase});\n                }\n                return {results: newResponse};\n            }\n        },\n        initSelection: function(element, callback) {\n            //TO FIX BUG - https://github.com/ivaynberg/select2/issues/1470\n        },\n    }\n\n    // Frame.getData(\"http://localhost:5000/api/frames\").then(function (resp) {\n    //     var response = resp.data.objects;\n    //     var newResponse = [];\n    //     for(var i = 0; i < response.length; i++) {\n    //         newResponse.push({'id': response[i].frame_id, 'text': response[i].name, 'data': response[i].word_string });\n    //     }\n    //     $scope.framez = {results: newResponse};\n    //     console.log($scope.framez);\n    // });\n\n    $scope.selectedFrame = null;\n    $scope.frameSelectOptions = {\n        ajax: {\n            url: CURRENT_SERVER + \"/api/frames/\",\n            data: function () {\n                return {}; // query params go here\n            },\n            cache: true,\n            results: function (data) { \n                var response = data.objects;\n                var newResponse = [];\n                for(var i = 0; i < response.length; i++) {\n                    newResponse.push({'id': response[i].frame_id, 'text': response[i].name, 'data': response[i].word_string });\n                }\n                return {results: newResponse};\n            }\n        }\n    }\n\n    $scope.$watch('selectedFrame', function (newVal, oldVal) {\n        if (oldVal == newVal) return;\n        $scope.currentFilter.frame = newVal.id;\n        $scope.loadSpeeches($scope.currentFilter);\n    }, true);    \n\n    // $scope.loadTopics();\n\n    $scope.show_more = function () { $scope.page += 1; $scope.loadSpeeches($scope.currentFilter); }\n    $scope.has_more = function () { if ($scope.next != \"\") return true; }\n\n    $scope.USStateList = State.getStates();\n\n    $scope.selectedStates = [];\n\n    $scope.$watch('selectedStates', function (newVal, oldVal) {\n        if (newVal == 0 && oldVal == 0) return;\n        if ($scope.selectedStates.length != $scope.USStateList.length && $scope.selectedStates.length != 0) {\n            $scope.page = 1;\n            angular.extend($scope.currentFilter, {speech__speaker_state__in: newVal.join(\",\")});\n            $scope.loadSpeeches($scope.currentFilter);\n        }\n        // check to see if this is starting at 0 or becomes 0?\n        if ($scope.selectedStates.length == 0) {\n            $scope.page = 1;\n            delete $scope.currentFilter['speech__speaker_state__in'];\n            $scope.loadSpeeches($scope.currentFilter);\n        }\n    }, true);\n\n    $scope.$watch('selectedTopic', function (newVal, oldVal) {\n        if (oldVal == newVal) return;\n        $scope.currentFilter.topic = newVal.id;\n        $scope.page = 1;\n        $scope.loadSpeeches($scope.currentFilter);\n        if (!$scope.$$phase) { $scope.$apply(); }\n    }, true);\n\n    $scope.selectAllStates = function() {\n        $scope.selectedStates = [];\n    }\n\n    $scope.filterOptions = {\n        filterText: \"\",\n        useExternalFilter: true\n    };\n\n    $scope.pagingOptions = {\n        pageSizes: [30],\n        pageSize: 30,\n        currentPage: 1\n    };\n\n    $scope.sortInfo = { fields: ['date'], directions: ['asc'] };\n\n    $scope.dateOptions = {\n        changeYear: true,\n        changeMonth: true,\n        yearRange: '1900:-0'\n    };\n\n    $scope.mySelections = [];\n    $scope.gridOptions = { \n        data: 'speeches',\n        columnDefs: [\n                {field: 'relevance', displayName: 'ID', width: '10%'}, \n                {field: 'title', displayName: 'Title', width: '61%'}, \n                {field: 'speaker_state', displayName: 'State', width: '7%'},\n                {field: 'speaker_party', displayName: 'Party', width: '7%'},\n                {field: 'date', displayName: 'Date', width: '15%'}\n            ],\n        enablePaging: true,\n        pagingOptions: $scope.pagingOptions,        \n        filterOptions: $scope.filterOptions,\n        totalServerItems: 'total',\n        useExternalSorting: true,\n        keepLastSelected: false,\n        multiSelect: false,\n        i18n: \"en\",\n        jqueryUITheme: false,\n        sortInfo: $scope.sortInfo,\n        showFooter: true,\n        selectedItems: $scope.mySelections\n    };\n\n    $scope.$watch('sortInfo', function (newVal, oldVal) {\n        \n        for (var col in $scope.sortInfo.columns) {\n            var descending = '';\n            if ($scope.sortInfo.directions[col] == 'desc')\n                descending = '-';\n            $scope.currentFilter.ordering = descending + $scope.sortInfo.columns[col].field;\n            $scope.page = 1;\n            $scope.loadSpeeches($scope.currentFilter);\n            if (!$scope.$$phase) { $scope.$apply(); }\n        }\n    }, true);\n\n    $scope.$watch('pagingOptions', function (newVal, oldVal) {\n        if (newVal !== oldVal && newVal.currentPage !== oldVal.currentPage) {\n            $scope.page = newVal.currentPage;\n            $scope.loadSpeeches($scope.currentFilter);\n            if (!$scope.$$phase) { $scope.$apply(); }\n        }\n    }, true);\n\n    $scope.currentSpeech = null;\n    $scope.$watch('mySelections', function (newVal, oldVal) {\n        $scope.currentSpeech=newVal[0];\n    }, true);\n\n    $scope.$watch('startDateFilter', function (newVal,oldVal){\n        if(newVal==null) return;\n        $scope.page = 1; \n        // Mon Nov 11 2013 00:00:00 GMT-0800 (PST) \n        var d = new Date(newVal);\n        angular.extend($scope.currentFilter, {speech__date__gte: d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate()});\n        $scope.loadSpeeches($scope.currentFilter);\n\n    }, true);\n\n    $scope.$watch('endDateFilter', function (newVal,oldVal){\n        if(newVal==null) return;\n        $scope.page = 1; \n        // Mon Nov 11 2013 00:00:00 GMT-0800 (PST) \n        var d = new Date(newVal);\n        angular.extend($scope.currentFilter, {speech__date__lte: d.getFullYear()+'-'+(d.getMonth()+1)+'-'+d.getDate()});\n        $scope.loadSpeeches($scope.currentFilter);\n\n    }, true);\n\n    $scope.analyzeData = null;\n\n    $scope.analyzeSpeeches = function (parameters, fine) {\n\n        $scope.analyzing = true;\n        if ($scope.selectedTopic == null) return;\n        \n        var url = CURRENT_SERVER + '/analyze?dummy=dummy';\n        if (fine == true) url = CURRENT_SERVER + '/analyze2?dummy=dummy';\n\n        for (var param in parameters) {\n            url += \"&\" + param + \"=\" + parameters[param];\n        }\n        \n        console.log(url);\n\n        Analyze.getData(url).then(function (resp) {\n            console.log(CURRENT_SERVER + '/check?task_id=' + resp.data);\n\n            (function pollforAnalyzeData() {\n              AnalyzeData.getData(CURRENT_SERVER + '/check?task_id=' + resp.data).then(function (response) {\n\n                if (response.data.state == \"SUCCESS\") {\n                    console.log(response.data);\n\n                    var thedata = response.data;\n\n                    var limit = 100000;    \n                    var y = 0;\n                    var data = [];\n                    var dataSeries1 = { type: \"line\" };\n                    var dataSeries2 = { type: \"line\" };\n\n                    var dataPoints = [];\n                    var theOnes = [];\n                    for (var i = 0; i < thedata.frame_plot.dates.length; i++ ) {\n                        var dateTime = new Date(thedata.frame_plot.dates[i]);\n                        console.log(thedata.frame_plot.dates[i]);\n                        console.log(dateTime);\n                        dataPoints.push({\n                            x: dateTime,\n                            y: thedata.frame_plot.ratios[i]\n                        });\n                        if (i==0 || i==thedata.frame_plot.dates.length-1){\n                            theOnes.push({\n                                x: dateTime,\n                                y: 1\n                            });\n                        }\n                    }\n                    dataSeries1.dataPoints = dataPoints;\n                    dataSeries2.dataPoints = theOnes;\n                    data.push(dataSeries1);\n                    data.push(dataSeries2);\n                    console.log(data);\n\n\n                    var chart = new CanvasJS.Chart(\"chartContainer\",\n                    {\n                        zoomEnabled: true,\n                        title:{ text: thedata.frame_plot.title },\n                        axisX :{ labelAngle: -30 },\n                        axisY :{ includeZero:false, title: thedata.frame_plot.ylabel},\n                        data: data\n                    });\n                    chart.render();\n\n                    $scope.analyzeData = data;\n\n\n                    var limit = 100000;    \n                    var y = 0;\n                    var data = [];\n                    var dataSeries1 = { type: \"line\", showInLegend: true, legendText: \"Democrat Speeches\" };\n                    var dataSeries2 = { type: \"line\", showInLegend: true, legendText: \"Republican Speeches\"  };\n                    var dataSeries3 = { type: \"line\", showInLegend: true, legendText: \"Total Speeches\"  };\n\n                    var dataPoints1 = [];\n                    var dataPoints2 = [];\n                    var dataPoints3 = [];\n                    for (var i = 0; i < thedata.topic_plot.start_dates.length; i++ ) {\n                        var dateTime = new Date(thedata.topic_plot.start_dates[i]);\n                        dataPoints1.push({ x: dateTime, y: thedata.topic_plot.dem_counts[i] });\n                        dataPoints2.push({ x: dateTime, y: thedata.topic_plot.rep_counts[i] });\n                        dataPoints3.push({ x: dateTime, y: thedata.topic_plot.total_counts[i] });\n                    }\n                    dataSeries1.dataPoints = dataPoints1;\n                    dataSeries2.dataPoints = dataPoints2;\n                    dataSeries3.dataPoints = dataPoints3;\n\n                    data.push(dataSeries1);\n                    data.push(dataSeries2);\n                    data.push(dataSeries3);\n\n                    var chart = new CanvasJS.Chart(\"chartContainer2\",\n                    {\n                        zoomEnabled: true,\n                        title:{ text: thedata.topic_plot.title },\n                        axisX :{ labelAngle: -30 },\n                        axisY :{ includeZero:false, title: thedata.topic_plot.ylabel},\n                        data: data\n                    });\n                    chart.render();\n\n                    $scope.analyzeData = data;\n\n                }\n                else {\n                  console.log(response.data);\n                  setTimeout(pollforAnalyzeData, 5000);\n                }\n\n              });\n            }());\n\n        });\n\n    }\n\n    $scope.navType = 'pills';\n    $scope.currentTab = 0;\n    $scope.tabs = [\n        {heading: \"Select Topic\", active: true},\n        {heading: \"Apply Filters\", active: false},\n        {heading: \"Select Frame\", active: false},\n        {heading: \"Analyze\", active: false}\n    ]\n\n    $scope.percentTabs = ($scope.currentTab+1)/$scope.tabs.length * 100;\n    $scope.nextTab = function() {\n        if ($scope.currentTab == ($scope.tabs.length - 1)) return;\n        $scope.currentTab++;\n        $scope.tabs[$scope.currentTab].active = true;\n    }\n    $scope.prevTab = function() {\n        if ($scope.currentTab == 0) return;\n        $scope.currentTab--;\n        $scope.tabs[$scope.currentTab].active = true;\n    }\n    \n    $scope.updatePercentTab = function(tab) {\n        console.log(tab);\n        $scope.currentTab = tab;\n        $scope.percentTabs = ($scope.currentTab+1)/$scope.tabs.length * 100;\n\n        window.setTimeout(function(){\n            $(window).resize();\n            $(window).resize();\n        }, 1000);\n\n    };\n\n  });\n",
			"file": "app/assets/scripts/controllers/main.js",
			"file_size": 13599,
			"file_write_time": 1389277487000000,
			"settings":
			{
				"buffer_size": 13599,
				"line_ending": "Unix"
			}
		},
		{
			"file": "aws.sh",
			"settings":
			{
				"buffer_size": 1920,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 47.0,
		"selected_items":
		[
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			]
		],
		"width": 449.0
	},
	"console":
	{
		"height": 146.0
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/atul/Dropbox/Development/politicalframing/politicalframing.sublime-workspace",
		"/Users/atul/Dropbox/Development/politicalframing/app/assets/styles/main.css",
		"/Users/atul/Dropbox/Development/politicalframing/politicalframing.sublime-project",
		"/Users/atul/Dropbox/Development/politicalframing/node_modules/bower/lib/commands/init.js",
		"/Users/atul/Dropbox/Development/politicalframing/app/templates/index.html",
		"/Users/atul/Dropbox/Development/politicalframing/bower.json",
		"/Users/atul/Dropbox/Development/politicalframing/.bowerrc",
		"/Users/atul/Dropbox/Development/politicalframing/app/__init__.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/models/Frame.py",
		"/Users/atul/Dropbox/Development/politicalframing/package.json",
		"/Users/atul/Dropbox/Development/politicalframing/.npmrc",
		"/Users/atul/Dropbox/Development/core-admin/atul/source/javascripts/vendor/package.json",
		"/Users/atul/Dropbox/Development/core-admin/atul/source/javascripts/vendor/.buildpacks",
		"/Users/atul/Dropbox/Development/politicalframing/.env",
		"/Users/atul/Dropbox/Development/core-admin/atul/source/javascripts/vendor/d3.js",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/bower_components/fullcalendar/bower.json",
		"/Users/atul/Dropbox/Development/politicalframing/createdb.py",
		"/Users/atul/Dropbox/Development/politicalframing/manage.py",
		"/Users/atul/Dropbox/Development/politicalframing/old.txt",
		"/Users/atul/Dropbox/Development/politicalframing/README.md",
		"/Users/atul/Dropbox/Development/politicalframing/todo.txt",
		"/Users/atul/Dropbox/Development/politicalframing/populate_dummy_data.py",
		"/Users/atul/Dropbox/Development/politicalframing/requirements.txt",
		"/Users/atul/Dropbox/Development/politicalframing/runtime.txt",
		"/Users/atul/Dropbox/Development/politicalframing/notes",
		"/Users/atul/Dropbox/Development/politicalframing/setup.sh",
		"/Users/atul/Dropbox/Development/politicalframing/provision.sh",
		"/Users/atul/Dropbox/Development/buildstep/stack/packages.txt",
		"/Users/atul/Dropbox/Development/buildstep/stack/prepare",
		"/Users/atul/Dropbox/Development/buildstep/Makefile",
		"/Users/atul/Dropbox/Development/buildstep/buildstep",
		"/Users/atul/Dropbox/Development/buildstep/stack/builder",
		"/Users/atul/Dropbox/Development/buildstep/stack/buildpacks.txt",
		"/Users/atul/Dropbox/Development/politicalframing/aws.sh",
		"/Users/atul/Dropbox/Development/buildstep/Dockerfile",
		"/Users/atul/Dropbox/Development/core-admin/release_bs3 atul/.bundle/install.log",
		"/Users/atul/Dropbox/Northwestern University/MECH_ENG 333/Homework4",
		"/Users/atul/Dropbox/Development/dokku/tests/run_ec2",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/.websocket.disabled/README.md",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/config/web.js",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/config/Procfile",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/config/package.json",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/config/check_deploy",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/python-flask/check_deploy",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/python-flask/hello.py",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/python-flask/Procfile",
		"/Users/atul/Dropbox/Development/dokku/tests/apps/python-flask/requirements.txt",
		"/Users/atul/Dropbox/Development/dokku/tests/run_vagrant",
		"/Users/atul/Dropbox/Development/dokku/contrib/dokku-installer.rb",
		"/Users/atul/Desktop/nuvention.txt",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/scripts/controllers/According to Robin Dunbar, a professor of evolutio",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/scripts/controllers/main.js",
		"/Users/atul/Dropbox/Development/politicalframing/app/models/Topic.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/Analyze.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/views/analyze.html",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/scripts/controllers/analyze.js",
		"/Users/atul/Dropbox/Development/politicalframing/app/manage.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/database_views.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/decorators.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/styles/main.scss",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/styles/main.css",
		"/Users/atul/Dropbox/Development/politicalframing/app.py",
		"/Users/atul/Dropbox/Development/Capitol-Words/api/nohup.out",
		"/Users/atul/Dropbox/Development/Capitol-Words/api/local_settings.py",
		"/Users/atul/Dropbox/Development/Capitol-Words/api/bioguide_lookup.csv",
		"/Users/atul/Dropbox/Development/Capitol-Words/api/capitolwords",
		"/Users/atul/Dropbox/Development/Capitol-Words/scraper/scraper.py",
		"/Users/atul/Dropbox/Development/politicalframing/loggsssssssssssssss",
		"/Users/atul/Dropbox/Development/politicalframing/Procfile",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/views/browse.html",
		"/Users/atul/Dropbox/Development/politicalframing/app/static/scripts/app.js",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/User.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/Topic.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/SpeechTopic.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/Speech.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/controllers/Frame.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/models/Speech.py",
		"/Users/atul/Dropbox/Development/politicalframing/app/models/SpeechTopic.py",
		"/Users/atul/Downloads/Little Snitch 3.3/Little Snitch Reseter/Little Snitch Reseter.scpt"
	],
	"find":
	{
		"height": 40.0
	},
	"find_in_files":
	{
		"height": 93.0,
		"where_history":
		[
			"<project>",
			"-/Users/atul/Dropbox/Development/politicalframing/app/assets",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"selectedTopic",
			"bower_components",
			"bower_compn",
			"bower_components",
			"populate_frames_dummy_data",
			"software-properties-common",
			"python-software-properties",
			"ec2-ami-tools.zip",
			"aws",
			"ec2",
			"ec2-run-instances",
			"domains",
			"usage of",
			"selected topic",
			"Warning: FastRBTree not available, using Python version RBTree.",
			"bintrees",
			"assets",
			"self.datestring",
			"Congress was not in session",
			"api",
			"political party",
			"Select ",
			"Select Spe",
			"pagin",
			"total",
			"100",
			"heroku",
			"app.debug",
			"xls",
			"master"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"components"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 1,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "app/assets/scripts/controllers/main.js",
					"settings":
					{
						"buffer_size": 13599,
						"regions":
						{
						},
						"selection":
						[
							[
								1350,
								1350
							]
						],
						"settings":
						{
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 328.0,
						"zoom_level": 1.0
					},
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "aws.sh",
					"settings":
					{
						"buffer_size": 1920,
						"regions":
						{
						},
						"selection":
						[
							[
								1096,
								1045
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Shell-Unix-Generic.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 34.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 248.0,
	"status_bar_visible": true
}
